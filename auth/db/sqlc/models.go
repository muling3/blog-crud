// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type AccountType string

const (
	AccountTypeAdmin   AccountType = "admin"
	AccountTypeBlogger AccountType = "blogger"
	AccountTypeRegular AccountType = "regular"
)

func (e *AccountType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountType(s)
	case string:
		*e = AccountType(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountType: %T", src)
	}
	return nil
}

type NullAccountType struct {
	AccountType AccountType
	Valid       bool // Valid is true if AccountType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountType) Scan(value interface{}) error {
	if value == nil {
		ns.AccountType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountType), nil
}

type User struct {
	ID int32 `json:"id"`
	// User first + last names
	FullName    string          `json:"full_name"`
	Username    string          `json:"username"`
	Email       string          `json:"email"`
	Password    string          `json:"password"`
	Active      sql.NullInt32   `json:"active"`
	AccountType NullAccountType `json:"account_type"`
	LastLogin   sql.NullTime    `json:"last_login"`
}
