// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package db

import (
	"context"
)

const CreateUser = `-- name: CreateUser :one
INSERT INTO users (
  full_name, username, email, password, type
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, full_name, username, email, password, active, type, last_login
`

type CreateUserParams struct {
	FullName string   `json:"full_name"`
	Username string   `json:"username"`
	Email    string   `json:"email"`
	Password string   `json:"password"`
	Type     NullType `json:"type"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, CreateUser,
		arg.FullName,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.Type,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Active,
		&i.Type,
		&i.LastLogin,
	)
	return i, err
}

const DeleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, DeleteUser, id)
	return err
}

const GetUser = `-- name: GetUser :one
SELECT id, full_name, username, email, password, active, type, last_login FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, GetUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Active,
		&i.Type,
		&i.LastLogin,
	)
	return i, err
}

const ListUsers = `-- name: ListUsers :many
SELECT id, full_name, username, email, password, active, type, last_login FROM users
ORDER BY username
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, ListUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.Active,
			&i.Type,
			&i.LastLogin,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateUser = `-- name: UpdateUser :one
UPDATE users
  set password = $2
WHERE id = $1
RETURNING id, full_name, username, email, password, active, type, last_login
`

type UpdateUserParams struct {
	ID       int32  `json:"id"`
	Password string `json:"password"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, UpdateUser, arg.ID, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Active,
		&i.Type,
		&i.LastLogin,
	)
	return i, err
}
